name: CMake

on: [ push ]

env:
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"

jobs:
  build:
    name: "${{ matrix.config.cmake-build-type }} | ${{ matrix.config.name }}"
    environment: configure coverage
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - name: "Ubuntu 18.04"
            os: ubuntu-18.04
            cmake-toolchain: ""
            cmake-build-type: Release
          - name: "Ubuntu 20.04"
            os: ubuntu-20.04
            cmake-toolchain: ""
            cmake-build-type: Release
          - name: "Ubuntu 20.04"
            os: ubuntu-20.04
            cmake-toolchain: ""
            cmake-build-type: Debug
          - name: "Ubuntu 20.04 Sanitizers"
            os: ubuntu-20.04
            cmake-toolchain: "-DCMAKE_TOOLCHAIN_FILE=toolchains/linux_clang_11_sanitizers.cmake"
            cmake-build-type: Debug
          - name: "Ubuntu 20.04 Fuzzing"
            os: ubuntu-20.04
            cmake-toolchain: "-DCMAKE_TOOLCHAIN_FILE=toolchains/linux_clang_11_fuzzing.cmake"
            cmake-build-type: Debug
          - name: "MacOS Latest"
            os: macos-latest
            cmake-toolchain: ""
            cmake-build-type: Release
          - name: "MacOS Latest"
            os: macos-latest
            cmake-toolchain: ""
            cmake-build-type: Debug
          - name: "Windows 2019"
            os: windows-2019
            cmake-toolchain: ""
            cmake-build-type: Release
          - name: "Windows 2019"
            os: windows-2019
            cmake-toolchain: ""
            cmake-build-type: Debug

    steps:
      - uses: actions/checkout@v2

      - name: Cache
        uses: actions/cache@v2
        env:
          cache-name: cache-conan-modules
        with:
          path: |
            ${{ env.CONAN_USER_HOME }}
            ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.config.cmake-build-type }}-${{ hashFiles('CMakeLists.txt') }}-${{ hashFiles('cmake/Conan.cmake') }}

      - name: Create Build Environment
        # Some projects don't allow in-source building, so create a separate build directory
        # We'll use this as our working directory for all subsequent commands
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Install Conan
        id: conan
        uses: turtlebrowser/get-conan@main

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        shell: bash
        working-directory: ${{runner.workspace}}/build
        # Note the current convention is to use the -S and -B options here to specify source
        # and build directories, but this is only available with CMake 3.13 and higher.
        # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
        #
        # We need to source the profile file to make sure conan is in PATH
        run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=${{ matrix.config.cmake-build-type }}  ${{ matrix.config.cmake-toolchain }}

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config ${{ matrix.config.cmake-build-type }}

      - name: Test
        working-directory: ${{runner.workspace}}/build
        shell: bash
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{ matrix.config.cmake-build-type }}

      - name: Clean Conan Cache
        shell: bash
        run: |
          conan remove -f "*" --builds
          conan remove -f "*" --src
          conan remove -f "*" --system-reqs
